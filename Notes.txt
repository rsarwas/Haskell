Notes about my attempts at Project Euler in Haskell
By Regan Sarwas (rsarwas@gmail.com) August 2013 to ...

* Although some of these problems can be simplified by loading a standard or third party module,
  I am limiting myself to just the functions available in the Prelude module loaded by GHCi.

* It is intended that most code be run with the Haskell interpreter (GHCi)
  1. Download the Haskell platform from http://www.haskell.org/platform/
  2. Launch ghci in a terminal window
  3. From the ghci prompt, load this file with ':l pe'
  4. To get the solution to the first problem, just enter pe1 at the ghci prompt

* files are broken into groups of 20 pe1 = 1..20, pe2 = 21..40, etc.

* Files that require IO are broken into individual files, prefixed with the base file
  i.e. pe4_67 for problem #67

* input data files are named for the problem, and is usually piped into the executable
  i.e. $ time cat pe4_67triangle.txt | runhaskell pe3_67.hs

* The file ProjectEuler.hs has multi-use functions, and is imported into all other files

* Summary of fold/scan:
  foldl  f acc [a1, a2,     ... an]  = f (... (f (f acc a1) a2) ...) an
  foldl1 f acc [a1, a2, a3, ... an]  = f (... (f (f  a1 a2) a3) ...) an
  foldr  f acc [a1, ...       an-1, an] = f a1 (... (f an-1 (f an  acc)) ...)
  foldr1 f acc [a1, ... an-2, an-1, an] = f a1 (... (f an-2 (f an-1 an)) ...)
  scan[l|r|l1|r1] are similar to the fold functions, except they return a list with the value of the accumulator at each step


* FIXME improve time and space: 12, 14, 23, 27, 39, 47, 58, 70
* RE-SOLVE - 76, I stumbled onto some help with this problem, but I would like to resolve it myself.

